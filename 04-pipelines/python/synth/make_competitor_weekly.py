#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Synthesize 'Competitor Weekly' brief.
- Ne puca ako nema ulaza (piše placeholder).
- Ako postoji 05-data/competitors.csv, ubaci tabelu konkurenta.
- Ako postoje *.json sa stavkama (npr. candidate fajlovi), doda kratki rezime.
Izlaz: 06-delivery/briefs/competitor-weekly/{YYYY}-W{WW}/ (MD + HTML + meta.json)
Stdlib only.
"""
import os, sys, csv, json, glob, datetime, pathlib, textwrap

ROOT = pathlib.Path(__file__).resolve().parents[3]  # repo root
OUT_BASE = ROOT / "06-delivery" / "briefs" / "competitor-weekly"

def iso_week_stamp(dt=None):
    dt = dt or datetime.datetime.utcnow()
    y, w, _ = dt.isocalendar()
    return f"{y}-W{w:02d}"

def load_competitors_csv(path):
    rows = []
    if path.exists():
        with path.open(newline='', encoding="utf-8") as f:
            for r in csv.DictReader(f):
                rows.append({k.strip(): (v or "").strip() for k, v in r.items()})
    return rows

def find_candidate_json():
    # Dodaj ovdje putanje ako ih kasnije standardizuješ
    candidates = [
        "04-pipelines/python/classify/output/competitor_items.json",
        "04-pipelines/output/competitor_items.json",
        "05-data/competitor_items.json",
    ]
    items = []
    for rel in candidates:
        p = ROOT / rel
        if p.exists():
            try:
                items = json.loads(p.read_text(encoding="utf-8"))
                break
            except Exception:
                pass
    # fallback: probaj sve *.json u 05-data/competitor/*.json
    if not items:
        for p in glob.glob(str(ROOT / "05-data" / "competitor" / "*.json")):
            try:
                items.extend(json.loads(pathlib.Path(p).read_text(encoding="utf-8")))
            except Exception:
                continue
    # normalizuj u listu dict-ova
    if isinstance(items, dict):
        items = items.get("items") or items.get("data") or []
    if not isinstance(items, list):
        items = []
    return items

def md_table(rows, cols):
    if not rows:
        return ""
    header = "| " + " | ".join(cols) + " |\n"
    sep    = "| " + " | ".join(["---"]*len(cols)) + " |\n"
    body = ""
    for r in rows:
        body += "| " + " | ".join((r.get(c, "") or "").replace("\n"," ").strip() for c in cols) + " |\n"
    return header + sep + body

def render_html_from_md(md):
    # minimal: wrap u <pre> da bude vidljivo; po potrebi zamijeni sa pravim MD→HTML
    escaped = (md.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;"))
    return f"<!doctype html><meta charset='utf-8'><title>Competitor Weekly</title><pre style='font-family:ui-monospace,monospace'>{escaped}</pre>"

def main():
    stamp = iso_week_stamp()
    out_dir = OUT_BASE / stamp
    out_dir.mkdir(parents=True, exist_ok=True)

    # Ulazi (opcionalni)
    csv_path = ROOT / "05-data" / "competitors.csv"
    comp_rows = load_competitors_csv(csv_path)
    items = find_candidate_json()

    generated_at = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
    sha = os.getenv("GITHUB_SHA") or os.getenv("GH_SHA") or ""

    # Sadržaj (MD)
    md = []
    md.append(f"# Competitor Weekly — {stamp}")
    md.append("")
    md.append(f"_Generated at: {generated_at} UTC_")
    if sha:
        md.append(f"_Build: {sha}_")
    md.append("")

    if comp_rows:
        md.append("## Competitors (from 05-data/competitors.csv)")
        # pokušaj smislenih kolona
        cols = ["name","website","segment","notes"]
        # ako CSV nema ove kolone, uzmi prve 4 iz headera
        header_cols = list(comp_rows[0].keys())
        if not set(cols).issubset(header_cols):
            cols = header_cols[:4] if header_cols else []
        if cols:
            md.append(md_table(comp_rows, cols))
        md.append("")
    else:
        md.append("> Nema pronađenog `05-data/competitors.csv` — preskačem tabelu konkurenta.")
        md.append("")

    if items:
        md.append("## Highlights")
        top = items[:10]  # uzmi do 10 stavki
        for i, it in enumerate(top, 1):
            title = (it.get("title") or it.get("name") or "Untitled").strip()
            src   = it.get("source") or it.get("domain") or ""
            url   = it.get("url") or ""
            note  = it.get("summary") or it.get("desc") or ""
            line = f"{i}. **{title}**"
            if src: line += f" — _{src}_"
            if url: line += f" — {url}"
            if note:
                line += f"\n   - {note}"
            md.append(line)
        md.append("")
    else:
        md.append("> Nema pronađenih JSON stavki za highlights — placeholder generisan.")
        md.append("")

    md.append("—")
    md.append("_Auto-generated by synth/make_competitor_weekly.py_")

    md_text = "\n".join(md)
    html_text = render_html_from_md(md_text)
    meta = {
        "generated_at": generated_at,
        "week": stamp,
        "git_sha": sha,
        "inputs": {
            "competitors_csv": str(csv_path.relative_to(ROOT)),
            "json_candidates": [
                "04-pipelines/python/classify/output/competitor_items.json",
                "04-pipelines/output/competitor_items.json",
                "05-data/competitor/*.json"
            ]
        },
        "counts": {
            "competitors": len(comp_rows),
            "highlights": len(items)
        }
    }

    # Upis
    (out_dir / "competitor-weekly.md").write_text(md_text, encoding="utf-8")
    (out_dir / "competitor-weekly.html").write_text(html_text, encoding="utf-8")
    (out_dir / "competitor-weekly.meta.json").write_text(json.dumps(meta, ensure_ascii=False, indent=2), encoding="utf-8")

    print(f"[OK] Wrote: {out_dir}/competitor-weekly.(md|html|meta.json)")
    return 0

if __name__ == "__main__":
    sys.exit(main())
